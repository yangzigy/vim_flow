vi工作流，使用vim、bash构建便携式文本编辑工作流

工作流支持windows下gvim、和linux下的vim，包括配置文件、插件、依赖库以及对特定问题的解决方式。

对于windows，实现便携式部署的方式是将gvim.exe放置在vim需要的配置文件环境中（vim74和vimfiles）

对于linux，通过在~/bin下创建mvim脚本的链接：vif 来实现不干扰其他用户的部署。mvim脚本中首先改写$HOME使vim和bash的配置文件在局部生效。

文件组织：
ext_exe:	直接可执行的文件（插件需要的）
vim:		根目录，存gvim.exe
	vim74：	基本插件
	vimfilse：	扩展插件
	配置脚本

脚本列表：
一个便携脚本：	mvim：在执行depvimrc 
一个部署脚本:	depvimrc
vim脚本：
	_gvimrc:	gvim使用的额外配置
	_vimrc_pl:	插件的配置
	_vimnp:		无插件版本
	
	_vimp:		部署用, ->_vimnp,->_vimrc_pl
	_bashrc:	bash的配置文件

部署：
	vim的执行文件只要放在vim文件夹下，运行时就能访问到vimfiles里的插件
1、在windows下部署：
	直接为目录下的gvim.exe添加关联即可
2、在linux下部署：
	可以使用./depvimrc np或者pl或者m来选择部署的类型
	对于便携式（m）部署，使用vif命令来执行

vi工作流的插件：

一般代码工具：
	1、snipMate		代码提示和一般代码段录入
	2、rainbow_parentheses	让括号带不同的颜色
		添加启动触发
	3、multiple_cursors		类似sublime的多个单词选择操作
	4、bufexplorer	窗口管理器
	5、winmanager	窗口管理器
		配置：
			快捷键
	6、conque_term：	在vim中打开shell
		为了在shell中不做代码提示，并加入行号，在autoload/conque_term.vim中：
		搜索并注释conque_term#set_buffer_settings函数中的：setlocal nonumber
		在函数 conque_term#on_focus 中：
			"让acp失效
			if exists('g:loaded_autoload_acp')
				try
					call acp#lock()
				catch
					echo 'on_focus'
				endtry
			endif
		在函数 conque_term#on_blur 中：
			"让acp失效
			if exists('g:loaded_autoload_acp')
				try
					call acp#unlock()
				catch
					echo 'on_blur'
				endtry
			endif
	7、SrcExpl：	利用ctags进行代码查看
		为了让SrcExpl的窗口小，不占用窗口行数，修改源代码，使其窗口出现在本窗口的下方：
		（1）为使窗口出现在当前窗口的下方，而不是永远在所有窗口下方，在srcexpl.vim中：585行左右：
			exe 'silent! rightbelow ' . string(g:SrcExpl_winHeight) . 'split ' . a:wincmd
		（2）原来代码中直接获取最后一个窗口就能得到打开的窗口，现在需要获得刚刚打开的窗口：
			"需要获取最新打开的窗口
			"let srcexpl_win = winnr("$")
			let srcexpl_win = winnr()
		（3）原来代码中初始化时首先找到第一个编辑窗口，而不是当前窗口，这里需要改为当前窗口。
			只需注释掉1473行，不切换窗口即可：
		    "silent! exe l:tmp . "wincmd w"
		（4）发现此脚本生成ctags的时候会修改工作目录，将此功能去除，注释309行：
			"silent! exe "cd " . expand('%:p:h')
		（5）同时需要在脚本中做如下修改：
			let g:SrcExpl_pluginList = [
			        \ "__Tag_List__",
			        \ "_NERD_tree_"
			    \ ]
			nmap <F8>t :SrcExplToggle<CR>
			let g:SrcExpl_winHeight = 6
			let g:SrcExpl_gobackKey = "<f8>b"
			let g:SrcExpl_refreshTime = 500

python开发：

C++开发：
	1、clang_complete	代码补全（一般禁止）
		有时候会报找不到buildin include文件夹，可以在libclang.py文件中注释掉相关print语句，	第95行的if
		需要使用clang，windows需要下载libclang.dll，linux需要安装clang，并修改so的软连接
		配置：
			libclang的路径
			部分使能
	2、
配色：
	1、molokai
	2、solarized

工作流的其他配置：

bash的配置：在.bashrc中
